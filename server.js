require('dotenv').config();
const express = require('express');
const app = express();
const http = require('http').createServer(app);
const io = require('socket.io')(http, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});
const TelegramBot = require('node-telegram-bot-api');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –°–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –∏–≥—Ä—ã
const locations = [
    '–ê—ç—Ä–æ–ø–æ—Ä—Ç',
    '–ë–æ–ª—å–Ω–∏—Ü–∞',
    '–ö–∞—Ñ–µ',
    '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
    '–ú–∞–≥–∞–∑–∏–Ω',
    '–ü–∞—Ä–∫',
    '–†–µ—Å—Ç–æ—Ä–∞–Ω',
    '–®–∫–æ–ª–∞',
    '–°–ø–æ—Ä—Ç–∑–∞–ª',
    '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞'
];

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
const activeGames = new Map();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static('public'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–®–ø–∏–æ–Ω"! üïµÔ∏è‚Äç‚ôÇÔ∏è\n\n' +
        '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
        {
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
                        web_app: { url: process.env.WEB_APP_URL }
                    }
                ]]
            }
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
io.on('connection', (socket) => {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è');

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    socket.on('createGame', (playerName) => {
        const gameId = Math.random().toString(36).substring(2, 8);
        const game = {
            id: gameId,
            players: [{ id: socket.id, name: playerName }],
            state: 'waiting',
            location: null,
            spyIndex: null,
            createdAt: Date.now()
        };
        activeGames.set(gameId, game);
        socket.join(gameId);
        socket.emit('gameCreated', gameId);
        io.to(gameId).emit('playerJoined', game.players);
    });

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
    socket.on('joinGame', ({ gameId, playerName }) => {
        const game = activeGames.get(gameId);
        if (!game) {
            socket.emit('error', '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        if (game.state !== 'waiting') {
            socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å');
            return;
        }
        game.players.push({ id: socket.id, name: playerName });
        socket.join(gameId);
        io.to(gameId).emit('playerJoined', game.players);
    });

    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    socket.on('startGame', (gameId) => {
        const game = activeGames.get(gameId);
        if (!game || game.players.length < 3) {
            socket.emit('error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤');
            return;
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ
        game.location = locations[Math.floor(Math.random() * locations.length)];
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à–ø–∏–æ–Ω–∞
        game.spyIndex = Math.floor(Math.random() * game.players.length);
        game.state = 'in_progress';

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞–º
        game.players.forEach((player, index) => {
            const isSpy = index === game.spyIndex;
            const message = isSpy 
                ? { role: 'spy', location: null }
                : { role: 'player', location: game.location };
            
            io.to(player.id).emit('gameStarted', message);
        });

        io.to(gameId).emit('gameState', {
            state: 'in_progress',
            players: game.players.map(p => p.name)
        });
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    socket.on('chatMessage', ({ gameId, message }) => {
        const game = activeGames.get(gameId);
        if (!game) return;

        const player = game.players.find(p => p.id === socket.id);
        if (!player) return;

        io.to(gameId).emit('newMessage', {
            player: player.name,
            message: message
        });
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    socket.on('endGame', (gameId) => {
        const game = activeGames.get(gameId);
        if (!game) return;

        io.to(gameId).emit('gameEnded', {
            location: game.location,
            spy: game.players[game.spyIndex].name
        });

        activeGames.delete(gameId);
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    socket.on('disconnect', () => {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
        // –û—á–∏—Å—Ç–∫–∞ –∏–≥—Ä, –≥–¥–µ –±—ã–ª —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫
        for (const [gameId, game] of activeGames.entries()) {
            const playerIndex = game.players.findIndex(p => p.id === socket.id);
            if (playerIndex !== -1) {
                game.players.splice(playerIndex, 1);
                if (game.players.length === 0) {
                    activeGames.delete(gameId);
                } else {
                    io.to(gameId).emit('playerLeft', game.players);
                }
            }
        }
    });
});

// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(() => {
    const now = Date.now();
    for (const [gameId, game] of activeGames.entries()) {
        if (game.state === 'waiting' && now - game.createdAt > 30 * 60 * 1000) {
            activeGames.delete(gameId);
        }
    }
}, 30 * 60 * 1000);

// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 3000
const PORT = process.env.PORT || 3000;

// –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
http.listen(PORT, '0.0.0.0', () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
}); 