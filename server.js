require('dotenv').config();
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
const TelegramBot = require('node-telegram-bot-api');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: '*',
        methods: ['GET', 'POST']
    }
});

// Middleware
app.use(helmet());
app.use(compression());
app.use(morgan('dev'));
app.use(cors());
app.use(express.json());
app.use(express.static('public', {
    maxAge: '1d',
    setHeaders: (res, path) => {
        if (path.endsWith('.js')) {
            res.setHeader('Content-Type', 'application/javascript');
        }
    }
}));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
    polling: {
        interval: 300,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('spygame.db', (err) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    } else {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        initializeDatabase();
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
function initializeDatabase() {
    db.serialize(() => {
        // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db.run(`CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id TEXT UNIQUE,
            name TEXT,
            avatar TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`);

        // –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä
        db.run(`CREATE TABLE IF NOT EXISTS games (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            game_id TEXT UNIQUE,
            status TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`);

        // –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–∫–æ–≤
        db.run(`CREATE TABLE IF NOT EXISTS players (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            game_id TEXT,
            user_id INTEGER,
            role TEXT,
            word TEXT,
            FOREIGN KEY (game_id) REFERENCES games(game_id),
            FOREIGN KEY (user_id) REFERENCES users(id)
        )`);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from.first_name;
    
    const message = `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–®–ø–∏–æ–Ω"! üéÆ\n\n` +
                   `–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:`;
    
    const keyboard = {
        inline_keyboard: [[{
            text: 'üéÆ –ò–≥—Ä–∞—Ç—å –≤ –®–ø–∏–æ–Ω–∞',
            web_app: { url: process.env.WEB_APP_URL }
        }]]
    };
    
    bot.sendMessage(chatId, message, {
        reply_markup: keyboard
    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
    setTimeout(() => {
        bot.stopPolling();
        bot.startPolling();
    }, 5000);
});

// Configure multer for avatar uploads
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'public/images/avatars/');
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({ storage: storage });

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
const locations = [
    '–ê—ç—Ä–æ–ø–æ—Ä—Ç', '–ë–∞–Ω–∫', '–ë–æ–ª—å–Ω–∏—Ü–∞', '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞', '–ö–∞—Ñ–µ', '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
    '–ú–∞–≥–∞–∑–∏–Ω', '–ú—É–∑–µ–π', '–ü–∞—Ä–∫', '–†–µ—Å—Ç–æ—Ä–∞–Ω', '–°–ø–æ—Ä—Ç–∑–∞–ª', '–¢–µ–∞—Ç—Ä',
    '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–®–∫–æ–ª–∞', '–¶–∏—Ä–∫', '–ó–æ–æ–ø–∞—Ä–∫', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–°—Ç–∞–¥–∏–æ–Ω'
];

function getRandomLocation() {
    return locations[Math.floor(Math.random() * locations.length)];
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
const activeGames = new Map();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π Socket.io
io.on('connection', (socket) => {
    console.log('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    socket.on('createGame', async (data) => {
        try {
            const gameId = uuidv4().substring(0, 6);
            const game = {
                id: gameId,
                status: 'waiting',
                players: [{
                    id: data.user.id,
                    name: data.user.name,
                    avatar: data.user.avatar,
                    isAdmin: true
                }],
                location: null,
                spy: null
            };

            activeGames.set(gameId, game);
            socket.join(gameId);
            socket.emit('gameCreated', { gameId });
        } catch (error) {
            console.error('Error creating game:', error);
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã' });
        }
    });

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
    socket.on('joinGame', async (data) => {
        try {
            const { gameId, user } = data;
            
            if (!gameId || !user || !user.id) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ');
            }
            
            const game = activeGames.get(gameId);
            if (!game) {
                throw new Error('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            if (game.status !== 'waiting') {
                throw new Error('–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
            const existingPlayer = game.players.find(p => p.id === user.id);
            if (existingPlayer) {
                throw new Error('–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ');
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
            game.players.push({
                id: user.id,
                name: user.name,
                avatar: user.avatar,
                isAdmin: false
            });

            socket.join(gameId);
            socket.emit('gameJoined', { 
                gameId,
                players: game.players
            });

            // –û–ø–æ–≤–µ—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            socket.to(gameId).emit('playerJoined', {
                playerName: user.name,
                avatar: user.avatar
            });
        } catch (error) {
            console.error('Error joining game:', error);
            socket.emit('error', { message: error.message });
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    socket.on('chatMessage', (data) => {
        try {
            const { gameId, sender, text } = data;
            const game = activeGames.get(gameId);
            
            if (!game) {
                throw new Error('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            io.to(gameId).emit('chatMessage', {
                sender,
                text,
                timestamp: new Date().toISOString()
            });
        } catch (error) {
            console.error('Error sending message:', error);
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
        }
    });

    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    socket.on('startGame', (data) => {
        try {
            const { gameId } = data;
            const game = activeGames.get(gameId);
            
            if (!game) {
                throw new Error('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            if (game.status !== 'waiting') {
                throw new Error('–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å');
            }

            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
            game.location = getRandomLocation();
            
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à–ø–∏–æ–Ω–∞
            const spyIndex = Math.floor(Math.random() * game.players.length);
            game.spy = game.players[spyIndex].id;
            
            game.status = 'playing';

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º
            game.players.forEach(player => {
                const role = player.id === game.spy ? 'spy' : 'civilian';
                const word = role === 'spy' ? '–í—ã —à–ø–∏–æ–Ω!' : game.location;
                
                io.to(player.id).emit('gameStarted', {
                    role,
                    word
                });
            });
        } catch (error) {
            console.error('Error starting game:', error);
            socket.emit('error', { message: error.message });
        }
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    socket.on('disconnect', () => {
        console.log('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('unhandledRejection', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', error);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
}); 