require('dotenv').config();
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
const TelegramBot = require('node-telegram-bot-api');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: '*',
        methods: ['GET', 'POST']
    }
});

// Middleware
app.use(helmet());
app.use(compression());
app.use(morgan('dev'));
app.use(cors());
app.use(express.json());
app.use(express.static('public', {
    maxAge: '1d',
    setHeaders: (res, path) => {
        if (path.endsWith('.js')) {
            res.setHeader('Content-Type', 'application/javascript');
        }
    }
}));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
    polling: {
        interval: 300,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('spygame.db', (err) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    } else {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        initializeDatabase();
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
function initializeDatabase() {
    db.serialize(() => {
        // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db.run(`CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id TEXT UNIQUE,
            name TEXT,
            avatar TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`);

        // –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä
        db.run(`CREATE TABLE IF NOT EXISTS games (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            game_id TEXT UNIQUE,
            status TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`);

        // –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–∫–æ–≤
        db.run(`CREATE TABLE IF NOT EXISTS players (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            game_id TEXT,
            user_id INTEGER,
            role TEXT,
            word TEXT,
            FOREIGN KEY (game_id) REFERENCES games(game_id),
            FOREIGN KEY (user_id) REFERENCES users(id)
        )`);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from.first_name;
    
    const message = `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–®–ø–∏–æ–Ω"! üéÆ\n\n` +
                   `–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:`;
    
    const keyboard = {
        inline_keyboard: [[{
            text: 'üéÆ –ò–≥—Ä–∞—Ç—å –≤ –®–ø–∏–æ–Ω–∞',
            web_app: { url: process.env.WEB_APP_URL }
        }]]
    };
    
    bot.sendMessage(chatId, message, {
        reply_markup: keyboard
    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
    setTimeout(() => {
        bot.stopPolling();
        bot.startPolling();
    }, 5000);
});

// Configure multer for avatar uploads
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'public/images/avatars/');
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({ storage: storage });

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
const locations = [
    '–ê—ç—Ä–æ–ø–æ—Ä—Ç', '–ë–∞–Ω–∫', '–ë–æ–ª—å–Ω–∏—Ü–∞', '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞', '–ö–∞—Ñ–µ', '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
    '–ú–∞–≥–∞–∑–∏–Ω', '–ú—É–∑–µ–π', '–ü–∞—Ä–∫', '–†–µ—Å—Ç–æ—Ä–∞–Ω', '–°–ø–æ—Ä—Ç–∑–∞–ª', '–¢–µ–∞—Ç—Ä',
    '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–®–∫–æ–ª–∞', '–¶–∏—Ä–∫', '–ó–æ–æ–ø–∞—Ä–∫', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–°—Ç–∞–¥–∏–æ–Ω'
];

function getRandomLocation() {
    return locations[Math.floor(Math.random() * locations.length)];
}

// API Routes
app.post('/api/profile', upload.single('avatar'), async (req, res) => {
    try {
        const { telegramId, name } = req.body;
        const avatar = req.file ? `/images/avatars/${req.file.filename}` : null;

        db.run(
            'INSERT OR REPLACE INTO users (telegram_id, name, avatar) VALUES (?, ?, ?)',
            [telegramId, name, avatar],
            function(err) {
                if (err) {
                    res.status(500).json({ success: false, error: err.message });
                } else {
                    res.json({ success: true, userId: this.lastID });
                }
            }
        );
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.get('/api/profile/:telegramId', async (req, res) => {
    try {
        db.get(
            'SELECT * FROM users WHERE telegram_id = ?',
            [req.params.telegramId],
            (err, user) => {
                if (err) {
                    res.status(500).json({ success: false, error: err.message });
                } else if (user) {
                    res.json({ success: true, user });
                } else {
                    res.status(404).json({ success: false, error: 'User not found' });
                }
            }
        );
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π Socket.io
io.on('connection', (socket) => {
    console.log('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    socket.on('createGame', async (data) => {
        try {
            const gameId = uuidv4().substring(0, 6);
            db.serialize(() => {
                db.run('BEGIN TRANSACTION');
                
                // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
                db.run(
                    'INSERT INTO games (game_id, status) VALUES (?, ?)',
                    [gameId, 'waiting'],
                    function(err) {
                        if (err) {
                            db.run('ROLLBACK');
                            socket.emit('error', { message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã' });
                            return;
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
                        db.run(
                            'INSERT INTO players (game_id, user_id, role) VALUES (?, ?, ?)',
                            [gameId, data.user.id, 'spy'],
                            function(err) {
                                if (err) {
                                    db.run('ROLLBACK');
                                    socket.emit('error', { message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞' });
                                    return;
                                }
                                
                                db.run('COMMIT');
                                socket.join(gameId);
                                socket.emit('gameCreated', { gameId });
                            }
                        );
                    }
                );
            });
        } catch (error) {
            console.error('Error creating game:', error);
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã' });
        }
    });

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
    socket.on('joinGame', async (data) => {
        try {
            console.log('Joining game:', data);
            const { gameId, user } = data;
            
            if (!gameId || !user || !user.id) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ');
            }
            
            const game = games.get(gameId);
            if (!game) {
                throw new Error('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
            if (game.players.length >= 4) {
                throw new Error('–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä—É
            game.players.push({
                id: user.id,
                name: user.name,
                avatar: user.avatar,
                socketId: socket.id
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const [result] = await pool.query(
                'UPDATE games SET players = ? WHERE id = ?',
                [JSON.stringify(game.players), gameId]
            );
            
            if (result.affectedRows === 0) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É');
            }
            
            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º —Å–æ–∫–µ—Ç –∫ –∫–æ–º–Ω–∞—Ç–µ –∏–≥—Ä—ã
            socket.join(gameId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
            io.to(gameId).emit('gameUpdated', {
                gameId: gameId,
                players: game.players
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            socket.emit('gameJoined', {
                gameId: gameId,
                players: game.players
            });
            
            console.log(`Player ${user.name} joined game ${gameId}`);
        } catch (error) {
            console.error('Error joining game:', error);
            socket.emit('error', { message: error.message });
        }
    });

    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    socket.on('startGame', async (data) => {
        try {
            db.serialize(() => {
                db.run('BEGIN TRANSACTION');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
                db.run(
                    'UPDATE games SET status = ? WHERE game_id = ?',
                    ['playing', data.gameId],
                    function(err) {
                        if (err) {
                            db.run('ROLLBACK');
                            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã' });
                            return;
                        }
                        
                        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
                        db.all(
                            'SELECT * FROM players WHERE game_id = ?',
                            [data.gameId],
                            (err, players) => {
                                if (err) {
                                    db.run('ROLLBACK');
                                    socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤' });
                                    return;
                                }
                                
                                // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à–ø–∏–æ–Ω–∞
                                const spyIndex = Math.floor(Math.random() * players.length);
                                const location = getRandomLocation();
                                
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏ –∏ —Å–ª–æ–≤–∞
                                players.forEach((player, index) => {
                                    const role = index === spyIndex ? 'spy' : 'civilian';
                                    const word = role === 'spy' ? '' : location;
                                    
                                    db.run(
                                        'UPDATE players SET role = ?, word = ? WHERE id = ?',
                                        [role, word, player.id],
                                        (err) => {
                                            if (err) {
                                                db.run('ROLLBACK');
                                                socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π' });
                                                return;
                                            }
                                        }
                                    );
                                });
                                
                                db.run('COMMIT');
                                io.to(data.gameId).emit('gameStarted', { players });
                            }
                        );
                    }
                );
            });
        } catch (error) {
            console.error('Error starting game:', error);
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã' });
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    socket.on('chatMessage', ({ text }) => {
        try {
            db.get(
                'SELECT p.*, u.name FROM players p JOIN users u ON p.user_id = u.id WHERE p.id = ?',
                [socket.id],
                (err, player) => {
                    if (err || !player) {
                        socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
                        return;
                    }
                    
                    io.to(player.game_id).emit('chatMessage', {
                        sender: player.name,
                        text
                    });
                }
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    socket.on('endGame', ({ gameId }) => {
        try {
            db.serialize(() => {
                db.run('BEGIN TRANSACTION');
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
                db.get(
                    'SELECT p.*, u.name FROM players p JOIN users u ON p.user_id = u.id WHERE p.game_id = ? AND p.role = ?',
                    [gameId, 'spy'],
                    (err, spy) => {
                        if (err) {
                            db.run('ROLLBACK');
                            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã' });
                            return;
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
                        db.run(
                            'UPDATE games SET status = ? WHERE game_id = ?',
                            ['ended', gameId],
                            (err) => {
                                if (err) {
                                    db.run('ROLLBACK');
                                    socket.emit('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã' });
                                    return;
                                }
                                
                                db.run('COMMIT');
                                io.to(gameId).emit('gameEnded', {
                                    spy: spy.name,
                                    location: getRandomLocation()
                                });
                            }
                        );
                    }
                );
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
        }
    });

    // –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
    socket.on('leaveGame', () => {
        try {
            db.get(
                'SELECT game_id FROM players WHERE id = ?',
                [socket.id],
                (err, player) => {
                    if (err || !player) return;
                    
                    db.run(
                        'DELETE FROM players WHERE id = ?',
                        [socket.id],
                        (err) => {
                            if (err) return;
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∏–≥—Ä–æ–∫–∏
                            db.get(
                                'SELECT COUNT(*) as count FROM players WHERE game_id = ?',
                                [player.game_id],
                                (err, result) => {
                                    if (err) return;
                                    
                                    if (result.count === 0) {
                                        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É, –µ—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
                                        db.run(
                                            'DELETE FROM games WHERE game_id = ?',
                                            [player.game_id]
                                        );
                                    } else {
                                        io.to(player.game_id).emit('playerLeft', { players: result.count });
                                    }
                                }
                            );
                        }
                    );
                }
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã:', error);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
        console.log('Client disconnected');
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('unhandledRejection', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', error);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
}); 