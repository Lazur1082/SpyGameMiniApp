require('dotenv').config();
const express = require('express');
const app = express();
const http = require('http').createServer(app);
const io = require('socket.io')(http, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"],
        transports: ['websocket', 'polling']
    },
    pingTimeout: 60000,
    pingInterval: 25000
});
const TelegramBot = require('node-telegram-bot-api');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –≤–µ–±-—Ö—É–∫–∞ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { 
    polling: true,
    webHook: false 
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
});

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
    next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Express
app.use((err, req, res, next) => {
    console.error('Express error:', err);
    res.status(500).send('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!');
});

// –°–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –∏–≥—Ä—ã
const locations = [
    '–ê—ç—Ä–æ–ø–æ—Ä—Ç',
    '–ë–æ–ª—å–Ω–∏—Ü–∞',
    '–ö–∞—Ñ–µ',
    '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
    '–ú–∞–≥–∞–∑–∏–Ω',
    '–ü–∞—Ä–∫',
    '–†–µ—Å—Ç–æ—Ä–∞–Ω',
    '–®–∫–æ–ª–∞',
    '–°–ø–æ—Ä—Ç–∑–∞–ª',
    '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞'
];

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
const activeGames = new Map();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static('public'));

// –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'ok' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    try {
        const chatId = msg.chat.id;
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from.username || msg.from.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
        bot.sendMessage(chatId, 
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–®–ø–∏–æ–Ω"! üïµÔ∏è‚Äç‚ôÇÔ∏è\n\n' +
            '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
            {
                reply_markup: {
                    inline_keyboard: [[
                        {
                            text: 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
                            web_app: { url: process.env.WEB_APP_URL }
                        }
                    ]]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π Socket.IO
io.on('connection', (socket) => {
    console.log(`–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–∫–µ—Ç–∞
    socket.on('error', (error) => {
        console.error('Socket error:', error);
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    socket.on('createGame', (playerName) => {
        try {
            console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–≥—Ä–æ–∫–æ–º: ${playerName}`);
            const gameId = Math.random().toString(36).substring(2, 8);
            const game = {
                id: gameId,
                players: [{ id: socket.id, name: playerName }],
                state: 'waiting',
                location: null,
                spyIndex: null,
                createdAt: Date.now()
            };
            activeGames.set(gameId, game);
            socket.join(gameId);
            socket.emit('gameCreated', gameId);
            io.to(gameId).emit('playerJoined', game.players);
            console.log(`–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: ${gameId}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã:', error);
            socket.emit('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã');
        }
    });

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
    socket.on('joinGame', ({ gameId, playerName }) => {
        try {
            console.log(`–ò–≥—Ä–æ–∫ ${playerName} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ ${gameId}`);
            const game = activeGames.get(gameId);
            if (!game) {
                socket.emit('error', '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            if (game.state !== 'waiting') {
                socket.emit('error', '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å');
                return;
            }
            game.players.push({ id: socket.id, name: playerName });
            socket.join(gameId);
            io.to(gameId).emit('playerJoined', game.players);
            console.log(`–ò–≥—Ä–æ–∫ ${playerName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ ${gameId}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ:', error);
            socket.emit('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ');
        }
    });

    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    socket.on('startGame', (gameId) => {
        try {
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É: ${gameId}`);
            const game = activeGames.get(gameId);
            if (!game || game.players.length < 3) {
                socket.emit('error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤');
                return;
            }

            game.location = locations[Math.floor(Math.random() * locations.length)];
            game.spyIndex = Math.floor(Math.random() * game.players.length);
            game.state = 'in_progress';

            game.players.forEach((player, index) => {
                const isSpy = index === game.spyIndex;
                const message = isSpy 
                    ? { role: 'spy', location: null }
                    : { role: 'player', location: game.location };
                
                io.to(player.id).emit('gameStarted', message);
            });

            io.to(gameId).emit('gameState', {
                state: 'in_progress',
                players: game.players.map(p => p.name)
            });
            console.log(`–ò–≥—Ä–∞ ${gameId} –Ω–∞—á–∞–ª–∞—Å—å`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã:', error);
            socket.emit('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã');
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    socket.on('chatMessage', ({ gameId, message }) => {
        try {
            const game = activeGames.get(gameId);
            if (!game) return;

            const player = game.players.find(p => p.id === socket.id);
            if (!player) return;

            io.to(gameId).emit('newMessage', {
                player: player.name,
                message: message
            });
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–≥—Ä–µ ${gameId} –æ—Ç ${player.name}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    socket.on('endGame', (gameId) => {
        try {
            console.log(`–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã: ${gameId}`);
            const game = activeGames.get(gameId);
            if (!game) return;

            io.to(gameId).emit('gameEnded', {
                location: game.location,
                spy: game.players[game.spyIndex].name
            });

            activeGames.delete(gameId);
            console.log(`–ò–≥—Ä–∞ ${gameId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
            socket.emit('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã');
        }
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    socket.on('disconnect', () => {
        try {
            console.log(`–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞: ${socket.id}`);
            for (const [gameId, game] of activeGames.entries()) {
                const playerIndex = game.players.findIndex(p => p.id === socket.id);
                if (playerIndex !== -1) {
                    const player = game.players[playerIndex];
                    game.players.splice(playerIndex, 1);
                    console.log(`–ò–≥—Ä–æ–∫ ${player.name} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É ${gameId}`);
                    if (game.players.length === 0) {
                        activeGames.delete(gameId);
                        console.log(`–ò–≥—Ä–∞ ${gameId} —É–¥–∞–ª–µ–Ω–∞`);
                    } else {
                        io.to(gameId).emit('playerLeft', game.players);
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞:', error);
        }
    });
});

// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(() => {
    try {
        const now = Date.now();
        let cleanedGames = 0;
        for (const [gameId, game] of activeGames.entries()) {
            if (game.state === 'waiting' && now - game.createdAt > 30 * 60 * 1000) {
                activeGames.delete(gameId);
                cleanedGames++;
            }
        }
        if (cleanedGames > 0) {
            console.log(`–û—á–∏—â–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: ${cleanedGames}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä:', error);
    }
}, 30 * 60 * 1000);

// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 3000
const PORT = process.env.PORT || 3000;

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = http.listen(PORT, '0.0.0.0', () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: ${process.env.WEB_APP_URL}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
});

process.on('unhandledRejection', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', error);
}); 