require('dotenv').config();
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
const TelegramBot = require('node-telegram-bot-api');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: '*',
        methods: ['GET', 'POST']
    }
});

// Middleware
app.use(helmet());
app.use(compression());
app.use(morgan('dev'));
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
    polling: {
        interval: 300,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from.first_name;
    
    const message = `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–®–ø–∏–æ–Ω"! üéÆ\n\n` +
                   `–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:`;
    
    const keyboard = {
        inline_keyboard: [[{
            text: 'üéÆ –ò–≥—Ä–∞—Ç—å –≤ –®–ø–∏–æ–Ω–∞',
            web_app: { url: process.env.WEB_APP_URL }
        }]]
    };
    
    bot.sendMessage(chatId, message, {
        reply_markup: keyboard
    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    setTimeout(() => {
        bot.stopPolling();
        bot.startPolling();
    }, 5000);
});

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä
const games = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID –∏–≥—Ä—ã
function generateGameId() {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
const locations = [
    '–ê—ç—Ä–æ–ø–æ—Ä—Ç', '–ë–∞–Ω–∫', '–ë–æ–ª—å–Ω–∏—Ü–∞', '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞', '–ö–∞—Ñ–µ', '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
    '–ú–∞–≥–∞–∑–∏–Ω', '–ú—É–∑–µ–π', '–ü–∞—Ä–∫', '–†–µ—Å—Ç–æ—Ä–∞–Ω', '–°–ø–æ—Ä—Ç–∑–∞–ª', '–¢–µ–∞—Ç—Ä',
    '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–®–∫–æ–ª–∞', '–¶–∏—Ä–∫', '–ó–æ–æ–ø–∞—Ä–∫', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–°—Ç–∞–¥–∏–æ–Ω'
];

function getRandomLocation() {
    return locations[Math.floor(Math.random() * locations.length)];
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π Socket.io
io.on('connection', (socket) => {
    console.log('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    socket.on('createGame', ({ name }) => {
        try {
            const gameId = generateGameId();
            const game = {
                id: gameId,
                players: [{ id: socket.id, name, isAdmin: true }],
                status: 'waiting',
                location: null,
                spy: null
            };
            games.set(gameId, game);
            socket.join(gameId);
            socket.emit('gameCreated', { gameId, player: game.players[0], players: game.players });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã:', error);
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã' });
        }
    });

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
    socket.on('joinGame', ({ name, gameId }) => {
        try {
            const game = games.get(gameId);
            if (!game) {
                socket.emit('error', { message: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
                return;
            }
            if (game.status !== 'waiting') {
                socket.emit('error', { message: '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å' });
                return;
            }
            if (game.players.length >= 8) {
                socket.emit('error', { message: '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' });
                return;
            }

            const player = { id: socket.id, name, isAdmin: false };
            game.players.push(player);
            socket.join(gameId);
            io.to(gameId).emit('playerJoined', { players: game.players });
            socket.emit('joinedGame', { gameId, player, players: game.players });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ:', error);
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ' });
        }
    });

    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    socket.on('startGame', ({ gameId }) => {
        try {
            const game = games.get(gameId);
            if (!game) {
                socket.emit('error', { message: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
                return;
            }
            if (game.players.length < 3) {
                socket.emit('error', { message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤' });
                return;
            }

            game.status = 'playing';
            game.location = getRandomLocation();
            game.spy = game.players[Math.floor(Math.random() * game.players.length)].id;

            game.players.forEach(player => {
                const role = player.id === game.spy ? 'spy' : 'civilian';
                io.to(player.id).emit('gameStarted', {
                    role,
                    location: role === 'civilian' ? game.location : null
                });
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã:', error);
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã' });
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    socket.on('chatMessage', ({ text }) => {
        try {
            const game = Array.from(games.values()).find(g => 
                g.players.some(p => p.id === socket.id)
            );
            if (!game) return;

            const player = game.players.find(p => p.id === socket.id);
            io.to(game.id).emit('chatMessage', {
                sender: player.name,
                text
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    socket.on('endGame', ({ gameId }) => {
        try {
            const game = games.get(gameId);
            if (!game) return;

            const spy = game.players.find(p => p.id === game.spy);
            io.to(gameId).emit('gameEnded', {
                spy: spy.name,
                location: game.location
            });
            games.delete(gameId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
        }
    });

    // –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
    socket.on('leaveGame', () => {
        try {
            const game = Array.from(games.values()).find(g => 
                g.players.some(p => p.id === socket.id)
            );
            if (!game) return;

            game.players = game.players.filter(p => p.id !== socket.id);
            if (game.players.length === 0) {
                games.delete(game.id);
            } else {
                io.to(game.id).emit('playerLeft', { players: game.players });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã:', error);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
        try {
            const game = Array.from(games.values()).find(g => 
                g.players.some(p => p.id === socket.id)
            );
            if (!game) return;

            game.players = game.players.filter(p => p.id !== socket.id);
            if (game.players.length === 0) {
                games.delete(game.id);
            } else {
                io.to(game.id).emit('playerLeft', { players: game.players });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', error);
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('unhandledRejection', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', error);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
}); 