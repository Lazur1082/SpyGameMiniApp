// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.io
const socket = io();

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const screens = {
    settings: document.getElementById('settingsScreen'),
    main: document.getElementById('mainMenu'),
    start: document.getElementById('startScreen'),
    join: document.getElementById('joinScreen'),
    waiting: document.getElementById('waitingScreen'),
    game: document.getElementById('gameScreen'),
    end: document.getElementById('endScreen')
};

const elements = {
    playerName: document.getElementById('playerName'),
    playerNameJoin: document.getElementById('playerNameJoin'),
    gameId: document.getElementById('gameId'),
    currentGameId: document.getElementById('currentGameId'),
    playersList: document.getElementById('playersList'),
    roleInfo: document.getElementById('roleInfo'),
    chatMessages: document.getElementById('chatMessages'),
    messageInput: document.getElementById('messageInput'),
    gameResults: document.getElementById('gameResults'),
    themeToggle: document.getElementById('themeToggle'),
    soundToggle: document.getElementById('soundToggle')
};

const buttons = {
    settings: document.getElementById('settingsButton'),
    backFromSettings: document.getElementById('backFromSettings'),
    showCreate: document.getElementById('showCreateGame'),
    showJoin: document.getElementById('showJoinGame'),
    create: document.getElementById('createGame'),
    join: document.getElementById('joinGame'),
    start: document.getElementById('startGame'),
    send: document.getElementById('sendMessage'),
    end: document.getElementById('endGame'),
    newGame: document.getElementById('newGame'),
    backToMenu1: document.getElementById('backToMenu1'),
    backToMenu2: document.getElementById('backToMenu2'),
    backToMenu3: document.getElementById('backToMenu3')
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let currentPlayer = null;
let isAdmin = false;
let lastScreen = 'main';
let settings = {
    theme: localStorage.getItem('theme') || 'light',
    sound: localStorage.getItem('sound') === 'true' || false
};

// –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
const sounds = {
    message: new Audio('/sounds/message.mp3'),
    join: new Audio('/sounds/join.mp3'),
    leave: new Audio('/sounds/leave.mp3')
};

// –§—É–Ω–∫—Ü–∏–∏
function showScreen(screenName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    const screens = [
        'settingsScreen',
        'mainMenu',
        'startScreen',
        'joinScreen',
        'waitingScreen',
        'gameScreen',
        'endScreen'
    ];

    screens.forEach(screenId => {
        const screen = document.getElementById(screenId);
        if (screen) {
            screen.classList.add('hidden');
        }
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenName + 'Screen') || 
                        document.getElementById(screenName + 'Menu');
    if (targetScreen) {
        targetScreen.classList.remove('hidden');
    }
}

function updatePlayersList(players) {
    elements.playersList.innerHTML = '';
    players.forEach(player => {
        const playerItem = document.createElement('div');
        playerItem.className = 'player-item';
        const initials = player.name.split(' ').map(n => n[0]).join('').toUpperCase();
        playerItem.innerHTML = `
            <div class="player-avatar">${initials}</div>
            <span class="player-name">${player.name}</span>
            ${player.isAdmin ? '<span class="admin-badge">üëë</span>' : ''}
        `;
        elements.playersList.appendChild(playerItem);
    });
}

function addChatMessage(message) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${message.sender === currentPlayer?.name ? 'own' : ''}`;
    messageDiv.innerHTML = `
        <div class="message-sender">${message.sender}</div>
        <div class="message-text">${message.text}</div>
    `;
    elements.chatMessages.appendChild(messageDiv);
    elements.chatMessages.scrollTop = elements.chatMessages.scrollHeight;
    
    if (settings.sound && message.sender !== currentPlayer?.name) {
        sounds.message.play().catch(() => {});
    }
}

function playSound(soundName) {
    if (settings.sound && sounds[soundName]) {
        sounds[soundName].play().catch(() => {});
    }
}

function updateTheme(theme) {
    document.body.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
    settings.theme = theme;
    elements.themeToggle.checked = theme === 'dark';
}

function updateSound(enabled) {
    localStorage.setItem('sound', enabled);
    settings.sound = enabled;
    elements.soundToggle.checked = enabled;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
elements.themeToggle.addEventListener('change', (e) => {
    updateTheme(e.target.checked ? 'dark' : 'light');
});

elements.soundToggle.addEventListener('change', (e) => {
    updateSound(e.target.checked);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π UI
buttons.settings.addEventListener('click', () => {
    showScreen('settings');
});

buttons.backFromSettings.addEventListener('click', () => {
    showScreen(lastScreen);
});

buttons.showCreate.addEventListener('click', () => showScreen('start'));
buttons.showJoin.addEventListener('click', () => showScreen('join'));
buttons.backToMenu1.addEventListener('click', () => showScreen('main'));
buttons.backToMenu2.addEventListener('click', () => showScreen('main'));
buttons.backToMenu3.addEventListener('click', () => {
    socket.emit('leaveGame');
    showScreen('main');
});

buttons.create.addEventListener('click', () => {
    const name = elements.playerName.value.trim();
    if (name) {
        socket.emit('createGame', { name });
    } else {
        tg.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è',
            buttons: [{type: 'ok'}]
        });
    }
});

buttons.join.addEventListener('click', () => {
    const name = elements.playerNameJoin.value.trim();
    const gameId = elements.gameId.value.trim();
    if (name && gameId) {
        socket.emit('joinGame', { name, gameId });
    } else {
        tg.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ ID –∏–≥—Ä—ã',
            buttons: [{type: 'ok'}]
        });
    }
});

buttons.start.addEventListener('click', () => {
    if (isAdmin) {
        socket.emit('startGame');
    }
});

buttons.send.addEventListener('click', () => {
    const message = elements.messageInput.value.trim();
    if (message) {
        socket.emit('chatMessage', { text: message });
        elements.messageInput.value = '';
    }
});

elements.messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        buttons.send.click();
    }
});

buttons.end.addEventListener('click', () => {
    if (isAdmin) {
        tg.showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É?', (confirmed) => {
            if (confirmed) {
                socket.emit('endGame');
            }
        });
    }
});

buttons.newGame.addEventListener('click', () => {
    showScreen('main');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Socket.io
socket.on('connect', () => {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
    showScreen('main');
});

socket.on('connect_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    tg.showAlert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

socket.on('disconnect', () => {
    console.log('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    tg.showAlert('–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
});

socket.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞:', error);
    tg.showPopup({
        title: '–û—à–∏–±–∫–∞',
        message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
        buttons: [{type: 'ok'}]
    });
});

socket.on('gameCreated', (data) => {
    currentPlayer = data.player;
    isAdmin = true;
    elements.currentGameId.textContent = data.gameId;
    updatePlayersList(data.players);
    showScreen('waiting');
    
    // –ö–æ–ø–∏—Ä—É–µ–º ID –∏–≥—Ä—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    navigator.clipboard.writeText(data.gameId).catch(() => {});
    tg.showPopup({
        title: '–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞',
        message: `ID –∏–≥—Ä—ã: ${data.gameId}\nID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`,
        buttons: [{type: 'ok'}]
    });
});

socket.on('joinedGame', (data) => {
    currentPlayer = data.player;
    isAdmin = data.player.isAdmin;
    elements.currentGameId.textContent = data.gameId;
    updatePlayersList(data.players);
    showScreen('waiting');
    playSound('join');
});

socket.on('playerJoined', (data) => {
    updatePlayersList(data.players);
    playSound('join');
});

socket.on('playerLeft', (data) => {
    updatePlayersList(data.players);
    playSound('leave');
});

socket.on('gameStarted', (data) => {
    elements.roleInfo.innerHTML = `
        <h3 class="role-title">${data.role === 'spy' ? '–í—ã - –®–ü–ò–û–ù! üïµÔ∏è‚Äç‚ôÇÔ∏è' : '–í–∞—à–∞ —Ä–æ–ª—å'}</h3>
        <p>${data.role === 'spy' ? 
            '–ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å —É–≥–∞–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é, —Å–ª—É—à–∞—è —Ä–∞–∑–≥–æ–≤–æ—Ä –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤' : 
            `–õ–æ–∫–∞—Ü–∏—è: ${data.location}<br>–ù–µ –¥–∞–π—Ç–µ —à–ø–∏–æ–Ω—É –¥–æ–≥–∞–¥–∞—Ç—å—Å—è!`}</p>
    `;
    elements.chatMessages.innerHTML = '';
    showScreen('game');
});

socket.on('chatMessage', (data) => {
    addChatMessage(data);
});

socket.on('gameEnded', (data) => {
    elements.gameResults.innerHTML = `
        <h3>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h3>
        <p>–®–ø–∏–æ–Ω: ${data.spy}</p>
        <p>–õ–æ–∫–∞—Ü–∏—è: ${data.location}</p>
    `;
    showScreen('end');
});

// –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ID –∏–≥—Ä—ã
function copyGameId() {
    const gameId = elements.currentGameId.textContent;
    if (gameId) {
        navigator.clipboard.writeText(gameId)
            .then(() => {
                tg.showPopup({
                    title: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ',
                    message: 'ID –∏–≥—Ä—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞',
                    buttons: [{type: 'ok'}]
                });
            })
            .catch(() => {
                tg.showPopup({
                    title: '–û—à–∏–±–∫–∞',
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID –∏–≥—Ä—ã',
                    buttons: [{type: 'ok'}]
                });
            });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    try {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã
        updateTheme(settings.theme);
        updateSound(settings.sound);
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –∏–∑ Telegram
        if (tg.initDataUnsafe?.user) {
            const user = tg.initDataUnsafe.user;
            const name = [user.first_name, user.last_name].filter(Boolean).join(' ');
            elements.playerName.value = name;
            elements.playerNameJoin.value = name;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        showScreen('main');
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        socket.connect();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
}); 