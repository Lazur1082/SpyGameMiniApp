const socket = io({
    transports: ['websocket', 'polling'],
    reconnection: true,
    reconnectionAttempts: 5,
    reconnectionDelay: 1000
});

const tg = window.Telegram.WebApp;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
try {
    tg.ready();
    tg.expand();
} catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Web App:', error);
}

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const startScreen = document.getElementById('startScreen');
const waitingScreen = document.getElementById('waitingScreen');
const gameScreen = document.getElementById('gameScreen');
const endScreen = document.getElementById('endScreen');

const playerNameInput = document.getElementById('playerName');
const gameIdInput = document.getElementById('gameId');
const currentGameIdSpan = document.getElementById('currentGameId');
const playersList = document.getElementById('playersList');
const roleInfo = document.getElementById('roleInfo');
const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');
const gameResults = document.getElementById('gameResults');

// –ö–Ω–æ–ø–∫–∏
const createGameBtn = document.getElementById('createGame');
const joinGameBtn = document.getElementById('joinGame');
const startGameBtn = document.getElementById('startGame');
const sendMessageBtn = document.getElementById('sendMessage');
const endGameBtn = document.getElementById('endGame');
const newGameBtn = document.getElementById('newGame');

let currentGameId = null;

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
try {
    if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
        const user = tg.initDataUnsafe.user;
        playerNameInput.value = user.first_name || '–ò–≥—Ä–æ–∫';
        if (user.last_name) {
            playerNameInput.value += ' ' + user.last_name;
        }
    }
} catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
socket.on('connect', () => {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
    document.body.classList.remove('disconnected');
});

socket.on('disconnect', () => {
    console.log('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    document.body.classList.add('disconnected');
    tg.showAlert('–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
});

socket.on('connect_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    tg.showAlert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
createGameBtn.addEventListener('click', () => {
    try {
        const playerName = playerNameInput.value.trim();
        if (!playerName) {
            tg.showAlert('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
            return;
        }
        socket.emit('createGame', playerName);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã');
    }
});

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
joinGameBtn.addEventListener('click', () => {
    try {
        const playerName = playerNameInput.value.trim();
        const gameId = gameIdInput.value.trim();
        if (!playerName || !gameId) {
            tg.showAlert('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ ID –∏–≥—Ä—ã');
            return;
        }
        socket.emit('joinGame', { gameId, playerName });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ');
    }
});

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
startGameBtn.addEventListener('click', () => {
    try {
        socket.emit('startGame', currentGameId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã');
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
sendMessageBtn.addEventListener('click', () => {
    try {
        const message = messageInput.value.trim();
        if (message) {
            socket.emit('chatMessage', { gameId: currentGameId, message });
            messageInput.value = '';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
endGameBtn.addEventListener('click', () => {
    try {
        socket.emit('endGame', currentGameId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã');
    }
});

// –ù–æ–≤–∞—è –∏–≥—Ä–∞
newGameBtn.addEventListener('click', () => {
    try {
        location.reload();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendMessageBtn.click();
    }
});

// –°–æ–∫–µ—Ç —Å–æ–±—ã—Ç–∏—è
socket.on('gameCreated', (gameId) => {
    try {
        currentGameId = gameId;
        currentGameIdSpan.textContent = gameId;
        startScreen.classList.add('hidden');
        waitingScreen.classList.remove('hidden');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã');
    }
});

socket.on('error', (message) => {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', message);
    tg.showAlert(message);
});

socket.on('playerJoined', (players) => {
    try {
        playersList.innerHTML = players.map(player => 
            `<div class="player-item">${player.name}</div>`
        ).join('');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', error);
    }
});

socket.on('gameStarted', (data) => {
    try {
        waitingScreen.classList.add('hidden');
        gameScreen.classList.remove('hidden');
        
        if (data.role === 'spy') {
            roleInfo.innerHTML = `
                <h3>–í—ã - –®–ü–ò–û–ù! üïµÔ∏è‚Äç‚ôÇÔ∏è</h3>
                <p>–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —É–≥–∞–¥–∞—Ç—å –º–µ—Å—Ç–æ, –æ –∫–æ—Ç–æ—Ä–æ–º –≥–æ–≤–æ—Ä—è—Ç –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏.</p>
            `;
        } else {
            roleInfo.innerHTML = `
                <h3>–í–∞—à–µ –º–µ—Å—Ç–æ: ${data.location}</h3>
                <p>–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –Ω–µ –¥–∞—Ç—å —à–ø–∏–æ–Ω—É –¥–æ–≥–∞–¥–∞—Ç—å—Å—è –æ –º–µ—Å—Ç–µ.</p>
            `;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã');
    }
});

socket.on('newMessage', (data) => {
    try {
        const messageElement = document.createElement('div');
        messageElement.className = 'message';
        messageElement.innerHTML = `
            <span class="player">${data.player}:</span> ${data.message}
        `;
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
});

socket.on('gameEnded', (data) => {
    try {
        gameScreen.classList.add('hidden');
        endScreen.classList.remove('hidden');
        gameResults.innerHTML = `
            <p>–ú–µ—Å—Ç–æ –±—ã–ª–æ: <strong>${data.location}</strong></p>
            <p>–®–ø–∏–æ–Ω–æ–º –±—ã–ª: <strong>${data.spy}</strong></p>
        `;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã');
    }
});

socket.on('playerLeft', (players) => {
    try {
        playersList.innerHTML = players.map(player => 
            `<div class="player-item">${player.name}</div>`
        ).join('');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', error);
    }
}); 