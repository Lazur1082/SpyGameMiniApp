// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram?.WebApp || {
    initData: '',
    initDataUnsafe: { user: { username: 'Player' } },
    ready: () => {},
    expand: () => {},
    enableClosingConfirmation: () => {},
    showAlert: (message) => alert(message),
    showPopup: (params) => confirm(params.message),
    close: () => {},
    setHeaderColor: (color) => {},
    setBackgroundColor: (color) => {}
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.io
const socket = io();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const DEFAULT_AVATARS = [
    '/images/default-avatar.png',
    '/images/avatar1.png',
    '/images/avatar2.png',
    '/images/avatar3.png',
    '/images/avatar4.png'
];

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    // –ö–Ω–æ–ø–∫–∏
    settingsButton: document.getElementById('settingsButton'),
    backFromSettings: document.getElementById('backFromSettings'),
    showCreateGame: document.getElementById('showCreateGame'),
    showJoinGame: document.getElementById('showJoinGame'),
    createGame: document.getElementById('createGame'),
    joinGame: document.getElementById('joinGame'),
    backToMenu1: document.getElementById('backToMenu1'),
    backToMenu2: document.getElementById('backToMenu2'),
    backToMenu3: document.getElementById('backToMenu3'),
    startGame: document.getElementById('startGame'),
    endGame: document.getElementById('endGame'),
    newGame: document.getElementById('newGame'),
    sendMessage: document.getElementById('sendMessage'),

    // –≠–∫—Ä–∞–Ω—ã
    settingsScreen: document.getElementById('settingsScreen'),
    mainMenu: document.getElementById('mainMenu'),
    startScreen: document.getElementById('startScreen'),
    joinScreen: document.getElementById('joinScreen'),
    waitingScreen: document.getElementById('waitingScreen'),
    gameScreen: document.getElementById('gameScreen'),
    endScreen: document.getElementById('endScreen'),

    // –ü–æ–ª—è –≤–≤–æ–¥–∞
    playerName: document.getElementById('playerName'),
    playerNameJoin: document.getElementById('playerNameJoin'),
    gameId: document.getElementById('gameId'),
    messageInput: document.getElementById('messageInput'),
    currentGameId: document.getElementById('currentGameId'),
    playersList: document.getElementById('playersList'),
    roleInfo: document.getElementById('roleInfo'),
    chatMessages: document.getElementById('chatMessages'),
    gameResults: document.getElementById('gameResults'),

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    themeToggle: document.getElementById('themeToggle'),
    soundToggle: document.getElementById('soundToggle')
};

const buttons = {
    settings: document.getElementById('settingsButton'),
    backFromSettings: document.getElementById('backFromSettings'),
    showCreate: document.getElementById('showCreateGame'),
    showJoin: document.getElementById('showJoinGame'),
    create: document.getElementById('createGame'),
    join: document.getElementById('joinGame'),
    start: document.getElementById('startGame'),
    send: document.getElementById('sendMessage'),
    end: document.getElementById('endGame'),
    newGame: document.getElementById('newGame'),
    backToMenu1: document.getElementById('backToMenu1'),
    backToMenu2: document.getElementById('backToMenu2'),
    backToMenu3: document.getElementById('backToMenu3')
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const state = {
    theme: localStorage.getItem('theme') || 'light',
    gameId: null,
    players: [],
    messages: [],
    isInGame: false,
    isAdmin: false
};

// –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
const sounds = {
    message: new Audio('/sounds/message.mp3'),
    join: new Audio('/sounds/join.mp3'),
    leave: new Audio('/sounds/leave.mp3')
};

// Localization
const translations = {
    ru: {
        welcome: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        createGame: '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É',
        joinGame: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
        settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        back: '–ù–∞–∑–∞–¥',
        enterName: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è',
        enterGameId: 'ID –∏–≥—Ä—ã',
        enterMessage: '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        send: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
        copy: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
        players: '–ò–≥—Ä–æ–∫–∏',
        startGame: '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
        endGame: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É',
        newGame: '–ù–æ–≤–∞—è –∏–≥—Ä–∞',
        gameEnded: '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'
    },
    en: {
        welcome: 'Welcome!',
        createGame: 'Create Game',
        joinGame: 'Join Game',
        settings: 'Settings',
        back: 'Back',
        enterName: 'Enter name',
        enterGameId: 'Game ID',
        enterMessage: 'Enter message',
        send: 'Send',
        copy: 'Copy',
        players: 'Players',
        startGame: 'Start Game',
        endGame: 'End Game',
        newGame: 'New Game',
        gameEnded: 'Game Ended!'
    },
    es: {
        welcome: '¬°Bienvenido!',
        createGame: 'Crear Juego',
        joinGame: 'Unirse',
        settings: 'Ajustes',
        back: 'Atr√°s',
        enterName: 'Ingrese nombre',
        enterGameId: 'ID del Juego',
        enterMessage: 'Ingrese mensaje',
        send: 'Enviar',
        copy: 'Copiar',
        players: 'Jugadores',
        startGame: 'Iniciar Juego',
        endGame: 'Terminar Juego',
        newGame: 'Nuevo Juego',
        gameEnded: '¬°Juego Terminado!'
    }
};

let currentLanguage = localStorage.getItem('language') || 'ru';

function updateLanguage(lang) {
    currentLanguage = lang;
    localStorage.setItem('language', lang);
    translatePage();
}

function translatePage() {
    const elements = document.querySelectorAll('[data-translate]');
    elements.forEach(element => {
        const key = element.getAttribute('data-translate');
        if (translations[currentLanguage][key]) {
            element.textContent = translations[currentLanguage][key];
        }
    });
}

// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userProfile = {
    name: tg.initDataUnsafe?.user?.username || '–ò–≥—Ä–æ–∫',
    avatar: localStorage.getItem('userAvatar') || DEFAULT_AVATARS[0],
    gamesPlayed: parseInt(localStorage.getItem('gamesPlayed')) || 0,
    gamesWon: parseInt(localStorage.getItem('gamesWon')) || 0
};

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
function updateTheme(theme) {
    console.log('Updating theme to:', theme);
    state.theme = theme;
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ —Ö–µ–¥–µ—Ä–µ
    const themeButton = document.getElementById('themeButton');
    if (themeButton) {
        themeButton.querySelector('.button-icon').textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤ Telegram WebApp
    if (theme === 'dark') {
        tg.setHeaderColor('#212121');
        tg.setBackgroundColor('#212121');
    } else {
        tg.setHeaderColor('#2481cc');
        tg.setBackgroundColor('#ffffff');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞
function showScreen(screenId) {
    console.log('Showing screen:', screenId);
    
    if (state.isInGame && !['gameScreen', 'waitingScreen'].includes(screenId)) {
        console.log('Navigation blocked during gameplay');
        return;
    }
    
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.add('hidden');
    });
    
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.remove('hidden');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function updateProfile(avatar) {
    console.log('Updating profile:', { avatar });
    if (!DEFAULT_AVATARS.includes(avatar)) {
        console.error('Invalid avatar selected');
        return;
    }
    
    userProfile.avatar = avatar;
    localStorage.setItem('userAvatar', avatar);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const headerAvatar = document.getElementById('headerAvatar');
    const profileAvatar = document.getElementById('profileAvatar');
    
    if (headerAvatar) headerAvatar.src = avatar;
    if (profileAvatar) profileAvatar.src = avatar;
}

function updatePlayersList(players) {
    const playersList = document.getElementById('playersList');
    if (!playersList) return;
    
    playersList.innerHTML = '';
    players.forEach(player => {
        const playerItem = document.createElement('div');
        playerItem.className = 'player-item';
        playerItem.innerHTML = `
            <div class="player-avatar">
                <img src="${player.avatar || DEFAULT_AVATARS[0]}" alt="${player.name}">
            </div>
            <span class="player-name">${player.name}</span>
            ${player.isAdmin ? '<span class="admin-badge">üëë</span>' : ''}
        `;
        playersList.appendChild(playerItem);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addChatMessage(message) {
    const chatMessages = document.getElementById('chatMessages');
    if (!chatMessages) return;

    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${message.isOwn ? 'own' : ''}`;
    
    let messageContent = `
        <div class="message-sender">${message.sender}</div>
    `;
    
    if (message.image) {
        messageContent += `
            <div class="message-image">
                <img src="${message.image}" alt="Message image">
            </div>
        `;
    }
    
    messageContent += `
        <div class="message-text">${message.text}</div>
    `;
    
    messageDiv.innerHTML = messageContent;
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function playSound(soundName) {
    if (!state.sound) return;
    
    try {
        const audio = new Audio(`/sounds/${soundName}.mp3`);
        audio.play().catch(error => {
            console.error('Error playing sound:', error);
        });
    } catch (error) {
        console.error('Error initializing sound:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –°–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∞
    const avatarOptions = document.querySelectorAll('.avatar-option');
    avatarOptions.forEach(option => {
        option.addEventListener('click', () => {
            const avatar = option.dataset.avatar;
            if (avatar) {
                updateProfile(avatar);
                avatarOptions.forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
            }
        });
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
    const createGameBtn = document.getElementById('createGame');
    if (createGameBtn) {
        createGameBtn.addEventListener('click', () => {
            socket.emit('createGame', {
                playerName: userProfile.name,
                user: {
                    id: socket.id,
                    name: userProfile.name,
                    avatar: userProfile.avatar
                }
            });
        });
    }

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
    const joinGameBtn = document.getElementById('joinGame');
    if (joinGameBtn) {
        joinGameBtn.addEventListener('click', () => {
            const gameId = document.getElementById('gameId').value.trim();
            if (!gameId) {
                tg.showAlert('–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä—ã');
                return;
            }
            
            socket.emit('joinGame', {
                gameId: gameId,
                playerName: userProfile.name,
                user: {
                    id: socket.id,
                    name: userProfile.name,
                    avatar: userProfile.avatar
                }
            });
        });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessageBtn = document.getElementById('sendMessage');
    if (sendMessageBtn) {
        sendMessageBtn.addEventListener('click', () => {
            const messageInput = document.getElementById('messageInput');
            if (!messageInput) return;

            const message = messageInput.value.trim();
            if (!message) return;

            if (!state.gameId) {
                tg.showAlert('–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ');
                return;
            }

            socket.emit('chatMessage', {
                gameId: state.gameId,
                sender: userProfile.name,
                text: message,
                timestamp: new Date().toISOString()
            });
            
            messageInput.value = '';
        });
    }

    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    const startGameBtn = document.getElementById('startGame');
    if (startGameBtn) {
        startGameBtn.addEventListener('click', () => {
            if (!state.isAdmin) {
                tg.showAlert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
                return;
            }
            
            socket.emit('startGame', { gameId: state.gameId });
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Socket.io
function setupSocketHandlers() {
    socket.on('connect', () => {
        console.log('Connected to server');
        showScreen('mainMenu');
        
        const welcomeMessage = {
            text: 'üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–®–ø–∏–æ–Ω"!\n\nüîç –í —ç—Ç–æ–π –∏–≥—Ä–µ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —à–ø–∏–æ–Ω–æ–º, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—é—Ç –ª–æ–∫–∞—Ü–∏—é.\nüéØ –ó–∞–¥–∞—á–∞ —à–ø–∏–æ–Ω–∞ - —É–≥–∞–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –Ω–µ –¥–∞—Ç—å –µ–º—É —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.\n\nüì± –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
            image: '/images/SpyGameBannerWelcome.png'
        };
        
        addChatMessage({
            sender: '–°–∏—Å—Ç–µ–º–∞',
            text: welcomeMessage.text,
            image: welcomeMessage.image
        });
    });

    socket.on('connect_error', (error) => {
        console.error('Connection error:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    });

    socket.on('error', (error) => {
        console.error('Socket error:', error);
        tg.showAlert(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    });

    socket.on('gameCreated', (data) => {
        console.log('Game created:', data);
        state.gameId = data.gameId;
        state.players = [{ 
            name: userProfile.name, 
            avatar: userProfile.avatar,
            isAdmin: true 
        }];
        state.isAdmin = true;
        showScreen('waitingScreen');
        updatePlayersList(state.players);
        document.getElementById('currentGameId').textContent = data.gameId;
        
        addChatMessage({
            sender: '–°–∏—Å—Ç–µ–º–∞',
            text: `–ò–≥—Ä–∞ ${data.gameId} —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤...`
        });
    });

    socket.on('gameJoined', (data) => {
        console.log('Game joined:', data);
        state.gameId = data.gameId;
        state.players = data.players;
        state.isAdmin = false;
        showScreen('waitingScreen');
        updatePlayersList(data.players);
        document.getElementById('currentGameId').textContent = data.gameId;
        
        addChatMessage({
            sender: '–°–∏—Å—Ç–µ–º–∞',
            text: `–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ ${data.gameId}`
        });
    });

    socket.on('playerJoined', (data) => {
        console.log('Player joined:', data);
        if (!state.players) state.players = [];
        state.players.push({ 
            name: data.playerName, 
            avatar: data.avatar,
            isAdmin: false 
        });
        updatePlayersList(state.players);
        
        addChatMessage({
            sender: '–°–∏—Å—Ç–µ–º–∞',
            text: `${data.playerName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ`
        });
    });

    socket.on('chatMessage', (data) => {
        console.log('Received chat message:', data);
        addChatMessage({
            sender: data.sender,
            text: data.text,
            isOwn: data.sender === userProfile.name
        });
    });

    socket.on('gameStarted', (data) => {
        console.log('Game started:', data);
        state.role = data.role;
        state.isInGame = true;
        showScreen('gameScreen');
        
        document.querySelector('.bottom-navigation').style.display = 'none';
        document.querySelector('.header').style.display = 'none';
        
        addChatMessage({
            sender: '–°–∏—Å—Ç–µ–º–∞',
            text: `–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à–∞ —Ä–æ–ª—å: ${data.role}`
        });
    });

    socket.on('gameEnded', (data) => {
        console.log('Game ended:', data);
        state.isInGame = false;
        showScreen('endScreen');
        
        document.querySelector('.bottom-navigation').style.display = 'flex';
        document.querySelector('.header').style.display = 'flex';
        
        addChatMessage({
            sender: '–°–∏—Å—Ç–µ–º–∞',
            text: `–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –®–ø–∏–æ–Ω: ${data.spy}, –õ–æ–∫–∞—Ü–∏—è: ${data.location}`
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('Initializing app...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    tg.ready();
    tg.expand();
    tg.enableClosingConfirmation();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setupSocketHandlers();
    setupEventListeners();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–µ–º—ã
    updateTheme(state.theme);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    updateProfile(userProfile.avatar);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    showScreen('mainMenu');
    console.log('Main menu should be visible now');
    
    console.log('App initialized successfully');
}); 